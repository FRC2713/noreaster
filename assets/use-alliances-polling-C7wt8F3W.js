import{u as A}from"./useQuery-Cgu6KS9_.js";import{r as g,s as L}from"./index-BmdevC1f.js";import{c as v}from"./react-yI-qG6nv.js";const d=v((t,s)=>({alliances:[],teams:[],isLoading:!1,error:null,lastUpdated:null,setAlliances:e=>t({alliances:e}),setTeams:e=>t({teams:e}),setLoading:e=>t({isLoading:e}),setError:e=>t({error:e}),setLastUpdated:e=>t({lastUpdated:e}),getAllianceById:e=>s().alliances.find(n=>n.id===e),getTeamById:e=>s().teams.find(n=>n.id===e),getAvailableTeams:()=>{const{alliances:e,teams:n}=s(),r=new Set(e.flatMap(l=>l.teams.filter(Boolean).map(m=>m.id)));return n.filter(l=>!r.has(l.id))},updateAlliance:(e,n)=>{t(r=>({alliances:r.alliances.map(l=>l.id===e?{...l,...n}:l)}))},addAlliance:e=>{t(n=>({alliances:[...n.alliances,e]}))},removeAlliance:e=>{t(n=>({alliances:n.alliances.filter(r=>r.id!==e)}))},assignTeamToSlot:(e,n,r)=>{t(l=>({alliances:l.alliances.map(c=>{const u=c.teams.map(i=>i?.id===e?null:i);if(c.id===n&&r&&r>=1&&r<=4){const i=l.teams.find(f=>f.id===e);i&&(u[r-1]=i)}return{...c,teams:u}})}))}}));async function S(){const{data:t,error:s}=await L.from("alliances").select("id, name, created_at").order("created_at",{ascending:!0});if(s)throw s;return t||[]}async function q(){const{data:t,error:s}=await L.from("teams").select("id, number, name, robot_image_url");if(s)throw s;return t||[]}async function B(){const{data:t,error:s}=await L.from("alliance_teams").select("id, alliance_id, team_id, slot");if(s)throw s;return t||[]}function F(){const{setAlliances:t,setTeams:s,setLoading:e,setError:n,setLastUpdated:r}=d(),{data:l=[],isLoading:m,error:c,dataUpdatedAt:u}=A({queryKey:["alliances","polling"],queryFn:S,refetchInterval:1e4,refetchIntervalInBackground:!0,staleTime:0,gcTime:300*1e3}),{data:i=[],isLoading:f,error:T}=A({queryKey:["teams","polling"],queryFn:q,refetchInterval:1e4,refetchIntervalInBackground:!0,staleTime:0,gcTime:300*1e3}),{data:p=[],isLoading:y,error:w,dataUpdatedAt:E}=A({queryKey:["alliance_teams","polling"],queryFn:B,refetchInterval:1e4,refetchIntervalInBackground:!0,staleTime:0,gcTime:300*1e3});return g.useEffect(()=>{i.length>0&&(s(i),console.log(`[Alliances Store] Updated with ${i.length} teams at ${new Date().toLocaleTimeString()}`))},[i,s]),g.useEffect(()=>{if(l.length>0&&p.length>=0){const a=l.map(o=>({id:o.id,name:o.name,created_at:o.created_at,teams:[null,null,null,null]})),h=new Map(i.map(o=>[o.id,o]));p.forEach(o=>{const I=a.findIndex(_=>_.id===o.alliance_id);I!==-1&&o.slot>=1&&o.slot<=4&&(a[I].teams[o.slot-1]=h.get(o.team_id)??null)}),t(a);const U=Math.max(u||0,E||0);r(new Date(U)),console.log(`[Alliances Store] Updated with ${a.length} alliances at ${new Date().toLocaleTimeString()}`)}},[l,p,i,u,E,t,r]),g.useEffect(()=>{e(m||f||y)},[m,f,y,e]),g.useEffect(()=>{const a=c||T||w;if(a){const h=a instanceof Error?a.message:"Failed to fetch alliances data";n(h),console.error("[Alliances Store] Error fetching alliances data:",a)}else n(null)},[c,T,w,n]),{alliances:d(a=>a.alliances),teams:d(a=>a.teams),isLoading:d(a=>a.isLoading),error:d(a=>a.error),lastUpdated:d(a=>a.lastUpdated)}}export{d as a,F as u};
