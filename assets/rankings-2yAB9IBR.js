function u(c,t){if(!c.length)return[];const n=new Map;c.forEach(e=>{n.set(e.id,{id:e.id,name:e.name,played:0,wins:0,losses:0,ties:0,totalRp:0,totalScore:0,countedScoreMatches:0})});const i=(e,o)=>{const r=n.get(e);r&&(r.totalRp+=o)};for(const e of t){const o=n.get(e.red_alliance_id),r=n.get(e.blue_alliance_id);!o||!r||!(e.red_score!=null&&e.blue_score!=null)||(o.played+=1,r.played+=1,e.red_score>e.blue_score?(o.wins+=1,r.losses+=1,i(o.id,3)):e.red_score<e.blue_score?(r.wins+=1,o.losses+=1,i(r.id,3)):(o.ties+=1,r.ties+=1,i(o.id,1),i(r.id,1)),i(o.id,(e.red_coral_rp?1:0)+(e.red_auto_rp?1:0)+(e.red_barge_rp?1:0)),i(r.id,(e.blue_coral_rp?1:0)+(e.blue_auto_rp?1:0)+(e.blue_barge_rp?1:0)),o.totalScore+=e.red_score,o.countedScoreMatches+=1,r.totalScore+=e.blue_score,r.countedScoreMatches+=1)}const s=Array.from(n.values()).map(e=>{const o=e.played>0?e.totalRp/e.played:0,r=e.countedScoreMatches>0?e.totalScore/e.countedScoreMatches:0;return{...e,avgRp:o,avgScore:r}});function d(e,o){let r=0,l=0;for(const a of t)(a.red_alliance_id===e||a.blue_alliance_id===e)&&(a.red_alliance_id===o||a.blue_alliance_id===o)&&(a.red_score==null||a.blue_score==null||(a.red_score>a.blue_score?a.red_alliance_id===e?r++:a.red_alliance_id===o&&l++:a.blue_score>a.red_score&&(a.blue_alliance_id===e?r++:a.blue_alliance_id===o&&l++)));return{aWins:r,bWins:l}}return s.sort((e,o)=>{if(o.avgRp!==e.avgRp)return o.avgRp-e.avgRp;const{aWins:r,bWins:l}=d(e.id,o.id);return r!==l?l-r:o.avgScore!==e.avgScore?o.avgScore-e.avgScore:e.name.localeCompare(o.name)}),s.map((e,o)=>({id:e.id,name:e.name,played:e.played,wins:e.wins,losses:e.losses,ties:e.ties,avgRp:e.avgRp,avgScore:e.avgScore,rank:o+1}))}export{u as c};
